// <auto-generated />
using LibraryManagementWebApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementWebApp.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementWebApp.Models.Авторы", b =>
                {
                    b.Property<int>("ID_автора")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_автора"));

                    b.HasKey("ID_автора");

                    b.ToTable("Авторы");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Авторы_книги", b =>
                {
                    b.Property<int>("ID_автора_книги")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_автора_книги"));

                    b.Property<int>("FKавтора")
                        .HasColumnType("int");

                    b.Property<int>("FKкниги")
                        .HasColumnType("int");

                    b.HasKey("ID_автора_книги");

                    b.HasIndex("FKавтора");

                    b.HasIndex("FKкниги");

                    b.ToTable("Авторы_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Жанры", b =>
                {
                    b.Property<int>("ID_жанра")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_жанра"));

                    b.HasKey("ID_жанра");

                    b.ToTable("Жанры");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Жанры_книги", b =>
                {
                    b.Property<int>("ID_жанра_книги")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_жанра_книги"));

                    b.Property<int>("FKжанра")
                        .HasColumnType("int");

                    b.Property<int>("FKкниги")
                        .HasColumnType("int");

                    b.HasKey("ID_жанра_книги");

                    b.HasIndex("FKжанра");

                    b.HasIndex("FKкниги");

                    b.ToTable("Жанры_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Издательства", b =>
                {
                    b.Property<int>("ID_издательства")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_издательства"));

                    b.HasKey("ID_издательства");

                    b.ToTable("Издательства");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Издательства_книги", b =>
                {
                    b.Property<int>("ID_издательства")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_издательства"));

                    b.Property<int>("FKиздательства")
                        .HasColumnType("int");

                    b.Property<int>("FKкниги")
                        .HasColumnType("int");

                    b.HasKey("ID_издательства");

                    b.HasIndex("FKиздательства");

                    b.HasIndex("FKкниги");

                    b.ToTable("Издательства_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Книги", b =>
                {
                    b.Property<int>("ID_книги")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_книги"));

                    b.HasKey("ID_книги");

                    b.ToTable("Книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Комнаты", b =>
                {
                    b.Property<int>("ID_комнаты")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_комнаты"));

                    b.HasKey("ID_комнаты");

                    b.ToTable("Комнаты");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Полки", b =>
                {
                    b.Property<int>("ID_полки")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_полки"));

                    b.Property<int>("FKряда")
                        .HasColumnType("int");

                    b.HasKey("ID_полки");

                    b.HasIndex("FKряда");

                    b.ToTable("Полки");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Популярные_книги", b =>
                {
                    b.Property<int>("ID_популярной_книги")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_популярной_книги"));

                    b.Property<int>("FKкниги")
                        .HasColumnType("int");

                    b.HasKey("ID_популярной_книги");

                    b.HasIndex("FKкниги");

                    b.ToTable("Популярные_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ряды", b =>
                {
                    b.Property<int>("ID_ряда")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ряда"));

                    b.Property<int>("FKсекции")
                        .HasColumnType("int");

                    b.HasKey("ID_ряда");

                    b.HasIndex("FKсекции");

                    b.ToTable("Ряды");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Секции", b =>
                {
                    b.Property<int>("ID_секции")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_секции"));

                    b.Property<int>("FKкомнаты")
                        .HasColumnType("int");

                    b.HasKey("ID_секции");

                    b.HasIndex("FKкомнаты");

                    b.ToTable("Секции");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Сотрудники_библиотеки", b =>
                {
                    b.Property<int>("ID_сотрудника")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_сотрудника"));

                    b.HasKey("ID_сотрудника");

                    b.ToTable("Сотрудники_библиотеки");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Справочник_операций", b =>
                {
                    b.Property<int>("ID_операции")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_операции"));

                    b.HasKey("ID_операции");

                    b.ToTable("Справочник_операций");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Формуляры", b =>
                {
                    b.Property<int>("ID_формуляра")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_формуляра"));

                    b.Property<int>("FKчитателя")
                        .HasColumnType("int");

                    b.Property<int>("FKэкземпляра_книги")
                        .HasColumnType("int");

                    b.Property<string>("Дата_операции")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Сроки_пользования")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_формуляра");

                    b.HasIndex("FKчитателя");

                    b.HasIndex("FKэкземпляра_книги");

                    b.ToTable("Формуляры");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Читатели", b =>
                {
                    b.Property<int>("ID_читателя")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_читателя"));

                    b.Property<string>("Читательский_билет")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_читателя");

                    b.ToTable("Читатели");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Экземпляры_книги", b =>
                {
                    b.Property<int>("ID_экземпляра_книги")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_экземпляра_книги"));

                    b.Property<int>("FKкниги")
                        .HasColumnType("int");

                    b.Property<int>("FKячейки")
                        .HasColumnType("int");

                    b.HasKey("ID_экземпляра_книги");

                    b.HasIndex("FKкниги");

                    b.HasIndex("FKячейки");

                    b.ToTable("Экземпляры_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ячейки", b =>
                {
                    b.Property<int>("ID_ячейки")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_ячейки"));

                    b.Property<int>("FKполки")
                        .HasColumnType("int");

                    b.HasKey("ID_ячейки");

                    b.HasIndex("FKполки");

                    b.ToTable("Ячейки");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Авторы_книги", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Авторы", "Автор")
                        .WithMany("Авторы_книги")
                        .HasForeignKey("FKавтора")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApp.Models.Книги", "Книга")
                        .WithMany("Авторы_книги")
                        .HasForeignKey("FKкниги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Автор");

                    b.Navigation("Книга");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Жанры_книги", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Жанры", "Жанр")
                        .WithMany("Жанры_книги")
                        .HasForeignKey("FKжанра")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApp.Models.Книги", "Книга")
                        .WithMany("Жанры_книги")
                        .HasForeignKey("FKкниги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Жанр");

                    b.Navigation("Книга");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Издательства_книги", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Издательства", "Издательство")
                        .WithMany("Издательства_книги")
                        .HasForeignKey("FKиздательства")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApp.Models.Книги", "Книга")
                        .WithMany("Издательства_книги")
                        .HasForeignKey("FKкниги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Издательство");

                    b.Navigation("Книга");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Полки", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Ряды", "Ряд")
                        .WithMany("Полки")
                        .HasForeignKey("FKряда")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ряд");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Популярные_книги", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Книги", "Книга")
                        .WithMany()
                        .HasForeignKey("FKкниги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Книга");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ряды", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Секции", "Секция")
                        .WithMany("Ряды")
                        .HasForeignKey("FKсекции")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Секция");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Секции", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Комнаты", "Комната")
                        .WithMany("Секции")
                        .HasForeignKey("FKкомнаты")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Комната");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Формуляры", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Читатели", "Читатель")
                        .WithMany("Формуляры")
                        .HasForeignKey("FKчитателя")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApp.Models.Экземпляры_книги", "Экземпляр_книги")
                        .WithMany("Формуляры")
                        .HasForeignKey("FKэкземпляра_книги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Читатель");

                    b.Navigation("Экземпляр_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Экземпляры_книги", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Книги", "Книга")
                        .WithMany("Экземпляры_книги")
                        .HasForeignKey("FKкниги")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApp.Models.Ячейки", "Ячейка")
                        .WithMany("Экземпляры_книги")
                        .HasForeignKey("FKячейки")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Книга");

                    b.Navigation("Ячейка");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ячейки", b =>
                {
                    b.HasOne("LibraryManagementWebApp.Models.Полки", "Полка")
                        .WithMany("Ячейки")
                        .HasForeignKey("FKполки")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Полка");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Авторы", b =>
                {
                    b.Navigation("Авторы_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Жанры", b =>
                {
                    b.Navigation("Жанры_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Издательства", b =>
                {
                    b.Navigation("Издательства_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Книги", b =>
                {
                    b.Navigation("Авторы_книги");

                    b.Navigation("Жанры_книги");

                    b.Navigation("Издательства_книги");

                    b.Navigation("Экземпляры_книги");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Комнаты", b =>
                {
                    b.Navigation("Секции");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Полки", b =>
                {
                    b.Navigation("Ячейки");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ряды", b =>
                {
                    b.Navigation("Полки");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Секции", b =>
                {
                    b.Navigation("Ряды");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Читатели", b =>
                {
                    b.Navigation("Формуляры");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Экземпляры_книги", b =>
                {
                    b.Navigation("Формуляры");
                });

            modelBuilder.Entity("LibraryManagementWebApp.Models.Ячейки", b =>
                {
                    b.Navigation("Экземпляры_книги");
                });
#pragma warning restore 612, 618
        }
    }
}
